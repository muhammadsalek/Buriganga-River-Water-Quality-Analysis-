theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "#333333"),  # Title customization (bold, centered)
plot.subtitle = element_text(size = 14, hjust = 0.5, color = "#666666"),  # Subtitle styling
axis.title = element_text(size = 16, face = "bold"),  # Axis title size
axis.text = element_text(size = 14),  # Axis text size
legend.title = element_text(size = 16, face = "bold"),  # Legend title size
legend.text = element_text(size = 14),  # Legend text size
legend.position = "bottom",  # Legend at the bottom for better positioning
strip.text = element_text(size = 16, face = "bold"),  # Panel titles for locations
panel.grid = element_line(color = "gray90", size = 0.5),  # Subtle gridlines for clarity
panel.grid.major = element_line(linetype = "dashed")  # Dash gridlines for easy reading
) +
guides(color = guide_legend(title = "Parameters"))  # Customizing the legend title
# Filter the data for selected parameters and locations
multiple_params <- tidy_data %>%
filter(Location %in% c("Mirpur Bridge", "Hazaribag", "Kamrangirchar") &
Parameter %in% c("pH", "DO", "TDS", "BOD", "COD", "Turbidity", "Chloride", "SS", "T-Alkalinity", "EC"))
# Define custom professional colors for each parameter (more muted and refined tones)
custom_colors <- c("pH" = "#1f77b4",    # Blue
"DO" = "#2ca02c",    # Green
"TDS" = "#ff7f0e",   # Orange
"BOD" = "#d62728",   # Red
"COD" = "#9467bd",   # Purple
"Turbidity" = "#8c564b",  # Brown
"Chloride" = "#e377c2",   # Pink
"SS" = "#7f7f7f",    # Gray
"T-Alkalinity" = "#f7b500", # Yellow
"EC" = "#ff69b4")    # Light Pink
# Generate a plot for Mirpur Bridge
mirpur_plot <- ggplot(multiple_params %>% filter(Location == "Mirpur Bridge"),
aes(x = Year, y = Value, color = Parameter, group = interaction(Parameter, Location))) +
geom_line(size = 1.5) +  # Thicker lines for better visibility
geom_point(size = 4) +  # Larger points for emphasis and clarity
scale_color_manual(values = custom_colors) +  # Custom refined professional colors
labs(
title = "Trends of Water Quality Parameters at Mirpur Bridge",  # Descriptive title
x = "Year",  # X-axis label
y = "Concentration (mg/L)",  # Y-axis label (update based on your units)
caption = "Source: Your Dataset (provide source if applicable)"  # Source of the data
) +
theme_minimal(base_size = 16) +  # Clean, minimalist theme for better readability
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "#333333"),  # Title customization (bold, centered)
axis.title = element_text(size = 16, face = "bold"),  # Axis title size
axis.text = element_text(size = 14),  # Axis text size
legend.title = element_text(size = 16, face = "bold"),  # Legend title size
legend.text = element_text(size = 14),  # Legend text size
legend.position = "bottom",  # Legend at the bottom for better positioning
strip.text = element_text(size = 16, face = "bold"),  # Panel titles for locations
panel.grid = element_line(color = "gray90", size = 0.5),  # Subtle gridlines for clarity
panel.grid.major = element_line(linetype = "dashed")  # Dash gridlines for easy reading
) +
guides(color = guide_legend(title = "Parameters"))  # Customizing the legend title
# Generate a plot for Hazaribag
hazaribag_plot <- ggplot(multiple_params %>% filter(Location == "Hazaribag"),
aes(x = Year, y = Value, color = Parameter, group = interaction(Parameter, Location))) +
geom_line(size = 1.5) +  # Thicker lines for better visibility
geom_point(size = 4) +  # Larger points for emphasis and clarity
scale_color_manual(values = custom_colors) +  # Custom refined professional colors
labs(
title = "Trends of Water Quality Parameters at Hazaribag",  # Descriptive title
x = "Year",  # X-axis label
y = "Concentration (mg/L)",  # Y-axis label (update based on your units)
caption = "Source: Your Dataset (provide source if applicable)"  # Source of the data
) +
theme_minimal(base_size = 16) +  # Clean, minimalist theme for better readability
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "#333333"),  # Title customization (bold, centered)
axis.title = element_text(size = 16, face = "bold"),  # Axis title size
axis.text = element_text(size = 14),  # Axis text size
legend.title = element_text(size = 16, face = "bold"),  # Legend title size
legend.text = element_text(size = 14),  # Legend text size
legend.position = "bottom",  # Legend at the bottom for better positioning
strip.text = element_text(size = 16, face = "bold"),  # Panel titles for locations
panel.grid = element_line(color = "gray90", size = 0.5),  # Subtle gridlines for clarity
panel.grid.major = element_line(linetype = "dashed")  # Dash gridlines for easy reading
) +
guides(color = guide_legend(title = "Parameters"))  # Customizing the legend title
# Print the plots
mirpur_plot
# Filter the data for selected parameters and locations
multiple_params <- tidy_data %>%
filter(Location %in% c("Mirpur Bridge", "Hazaribag", "Kamrangirchar") &
Parameter %in% c("pH", "DO", "TDS", "BOD", "COD", "Turbidity", "Chloride", "SS", "T-Alkalinity", "EC"))
# Define custom professional colors for each parameter (more muted and refined tones)
custom_colors <- c("pH" = "#1f77b4",    # Blue
"DO" = "#2ca02c",    # Green
"TDS" = "#ff7f0e",   # Orange
"BOD" = "#d62728",   # Red
"COD" = "#9467bd",   # Purple
"Turbidity" = "#8c564b",  # Brown
"Chloride" = "#e377c2",   # Pink
"SS" = "#7f7f7f",    # Gray
"T-Alkalinity" = "#f7b500", # Yellow
"EC" = "#ff69b4")    # Light Pink
# Generate a plot for Mirpur Bridge
mirpur_plot <- ggplot(multiple_params %>% filter(Location == "Mirpur Bridge"),
aes(x = Year, y = Value, color = Parameter, group = interaction(Parameter, Location))) +
geom_line(size = 1.5) +  # Thicker lines for better visibility
geom_point(size = 4) +  # Larger points for emphasis and clarity
scale_color_manual(values = custom_colors) +  # Custom refined professional colors
labs(
title = "Trends of Water Quality Parameters at Mirpur Bridge",  # Descriptive title
x = "Year",  # X-axis label
y = "Concentration (mg/L)",  # Y-axis label (update based on your units)
caption = "Source: Dhaka Division Department of Environment (DoE) water quality data 2010–2023)"  # Source of the data
) +
theme_minimal(base_size = 16) +  # Clean, minimalist theme for better readability
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "#333333"),  # Title customization (bold, centered)
axis.title = element_text(size = 16, face = "bold"),  # Axis title size
axis.text = element_text(size = 14),  # Axis text size
legend.title = element_text(size = 16, face = "bold"),  # Legend title size
legend.text = element_text(size = 14),  # Legend text size
legend.position = "bottom",  # Legend at the bottom for better positioning
strip.text = element_text(size = 16, face = "bold"),  # Panel titles for locations
panel.grid = element_line(color = "gray90", size = 0.5),  # Subtle gridlines for clarity
panel.grid.major = element_line(linetype = "dashed")  # Dash gridlines for easy reading
) +
guides(color = guide_legend(title = "Parameters"))  # Customizing the legend title
# Generate a plot for Hazaribag
hazaribag_plot <- ggplot(multiple_params %>% filter(Location == "Hazaribag"),
aes(x = Year, y = Value, color = Parameter, group = interaction(Parameter, Location))) +
geom_line(size = 1.5) +  # Thicker lines for better visibility
geom_point(size = 4) +  # Larger points for emphasis and clarity
scale_color_manual(values = custom_colors) +  # Custom refined professional colors
labs(
title = "Trends of Water Quality Parameters at Hazaribag",  # Descriptive title
x = "Year",  # X-axis label
y = "Concentration (mg/L)",  # Y-axis label (update based on your units)
caption = "Source: Dhaka Division Department of Environment (DoE) water quality data 2010–2023"  # Source of the data
) +
theme_minimal(base_size = 16) +  # Clean, minimalist theme for better readability
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "#333333"),  # Title customization (bold, centered)
axis.title = element_text(size = 16, face = "bold"),  # Axis title size
axis.text = element_text(size = 14),  # Axis text size
legend.title = element_text(size = 16, face = "bold"),  # Legend title size
legend.text = element_text(size = 14),  # Legend text size
legend.position = "bottom",  # Legend at the bottom for better positioning
strip.text = element_text(size = 16, face = "bold"),  # Panel titles for locations
panel.grid = element_line(color = "gray90", size = 0.5),  # Subtle gridlines for clarity
panel.grid.major = element_line(linetype = "dashed")  # Dash gridlines for easy reading
) +
guides(color = guide_legend(title = "Parameters"))  # Customizing the legend title
# Print the plots
mirpur_plot
hazaribag_plot
library(ggplot2)
library(dplyr)
# Filter the data for the selected parameters and locations
multiple_params <- tidy_data %>%
filter(Location %in% c("Mirpur Bridge", "Hazaribag", "Kamrangirchar") &
Parameter %in% c("pH", "DO", "TDS", "BOD", "COD", "Turbidity", "Chloride", "SS", "T-Alkalinity", "EC"))
# Define custom colors for parameters
custom_colors <- c(
"pH" = "blue", "DO" = "green", "TDS" = "orange",
"BOD" = "red", "COD" = "purple", "Turbidity" = "brown",
"Chloride" = "pink", "SS" = "cyan", "T-Alkalinity" = "darkgreen", "EC" = "gray"
)
# Create a professional plot
ggplot(multiple_params, aes(x = Year, y = Value, color = Parameter, group = Parameter)) +
geom_line(size = 1.2) +  # Thicker lines for better visibility
geom_point(size = 3) +  # Larger points for emphasis
scale_color_manual(values = custom_colors) +  # Custom colors for parameters
facet_wrap(~Location, ncol = 1) +  # Separate panels for each location
labs(
title = "Trends of Water Quality Parameters Over Time Across Locations",
x = "Year",
y = "Concentration (mg/L)",  # Update based on your units
) +
theme_minimal(base_size = 15) +  # Clean, minimalist theme
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Title customization
axis.title = element_text(size = 14),  # Axis title size
axis.text = element_text(size = 12),  # Axis text size
legend.title = element_text(size = 14),  # Legend title size
legend.text = element_text(size = 12),  # Legend text size
legend.position = "bottom",  # Legend at the bottom
plot.caption = element_text(size = 10, hjust = 1)  # Caption positioning
) +
guides(color = guide_legend(title = "Parameters"))  # Customizing the legend title
library(ggplot2)
library(dplyr)
# Filter the data for the selected parameters and locations
multiple_params <- tidy_data %>%
filter(Location %in% c("Mirpur Bridge", "Hazaribag", "Kamrangirchar") &
Parameter %in% c("pH", "DO", "TDS", "BOD", "COD", "Turbidity", "Chloride", "SS", "T-Alkalinity", "EC"))
# Define custom colors for the parameters (replacing "teal" with "darkcyan")
custom_colors <- c(
"pH" = "blue", "DO" = "green", "TDS" = "orange", "BOD" = "red",
"COD" = "purple", "Turbidity" = "cyan", "Chloride" = "darkgray",
"SS" = "darkcyan", "T-Alkalinity" = "pink", "EC" = "brown"
)
# Create the plot
ggplot(multiple_params, aes(x = Year, y = Value, color = Parameter, group = Parameter)) +
geom_line(size = 1.2) +  # Thicker lines for better visibility
geom_point(size = 3) +   # Larger points for emphasis
scale_color_manual(values = custom_colors) +  # Custom colors for parameters
facet_grid(. ~ Location) +  # Use facet_grid to display all locations in a row
labs(
title = "Trends of Water Quality Parameters Over Time Across Locations",
x = "Year",
y = "Concentration (mg/L)",
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(size = 10, hjust = 1)
) +
guides(color = guide_legend(title = "Parameters"))
# Filter the data for Kamrangirchar location (including all parameters)
multiple_params <- tidy_data %>%
filter(Location == "Kamrangirchar")
# Define custom colors for the parameters
custom_colors <- c(
"pH" = "blue", "DO" = "green", "TDS" = "orange", "BOD" = "red",
"COD" = "purple", "Turbidity" = "cyan", "Chloride" = "darkgray",
"SS" = "darkcyan", "T-Alkalinity" = "pink", "EC" = "brown"
)
# Create the plot
ggplot(multiple_params, aes(x = Year, y = Value, color = Parameter, group = Parameter)) +
geom_line(size = 1.2) +  # Thicker lines for better visibility
geom_point(size = 3) +   # Larger points for emphasis
scale_color_manual(values = custom_colors) +  # Custom colors for parameters
labs(
title = "Trends of Water Quality Parameters Over Time at Kamrangirchar",
x = "Year",
y = "Concentration (mg/L)"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(size = 10, hjust = 1)
) +
guides(color = guide_legend(title = "Parameters"))
multiple_params <- tidy_data %>%
filter(Location == "Kamrangirchar")
# Define custom colors for the parameters
custom_colors <- c(
"pH" = "blue", "DO" = "green", "TDS" = "orange", "BOD" = "red",
"COD" = "purple", "Turbidity" = "cyan", "Chloride" = "darkgray",
"SS" = "darkcyan", "T-Alkalinity" = "pink", "EC" = "brown"
)
# Create the plot
ggplot(multiple_params, aes(x = Year, y = Value, color = Parameter, group = Parameter)) +
geom_line(size = 1.2) +  # Thicker lines for better visibility
geom_point(size = 3) +   # Larger points for emphasis
scale_color_manual(values = custom_colors) +  # Custom colors for parameters
labs(
title = "Trends of Water Quality Parameters Over Time at Kamrangirchar",
x = "Year",
y = "Concentration (mg/L)"
) +
theme_minimal(base_size = 15) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
legend.position = "bottom",
plot.caption = element_text(size = 10, hjust = 1)
) +
guides(color = guide_legend(title = "Parameters"))
# Required Libraries
library(dplyr)
library(ggplot2)
# Load your dataset
# Assuming your dataset is loaded as `tidy_data`
# Normalize function based on WHO/EPA guidelines
normalize <- function(value, standard, parameter) {
if (parameter %in% c("pH", "DO")) {
(value - standard) / (8.5 - 6.5)  # pH example range
} else {
value / standard  # General case for pollutants
}
}
# Required Libraries
# Ensure the normalize function works row-by-row
normalize <- function(value, reference, parameter) {
if (parameter %in% c("pH", "DO")) {
(value - reference) / (8.5 - 6.5)  # pH and DO specific normalization
} else {
value / reference  # General case for other parameters
}
}
# Calculate weights from the dataset
weights <- tidy_data %>%
group_by(Parameter) %>%
summarize(Total = sum(Value, na.rm = TRUE)) %>%
ungroup() %>%
mutate(Weight = Total / sum(Total, na.rm = TRUE)) %>%
select(Parameter, Weight)
# Reference values (based on WHO/EPA)
reference_values <- tibble(
Parameter = c("pH", "DO", "BOD", "COD", "TDS", "Turbidity", "Chloride",
"SS", "T-Alkalinity", "EC"),
Reference = c(6.5, 6.0, 3.0, 10.0, 500, 1.0, 250, 30, 120, 1500)
)
# Join weights and references to tidy data
tidy_data <- tidy_data %>%
left_join(weights, by = "Parameter") %>%
left_join(reference_values, by = "Parameter")
# Debugging: Ensure columns exist after joining
print(head(tidy_data))
# Calculate sub-index (normalized values)
tidy_data <- tidy_data %>%
rowwise() %>%  # Process each row independently
mutate(
SubIndex = normalize(Value, Reference, Parameter) * Weight
) %>%
ungroup()  # Ungroup to finalize the result
#### Step 1: Calculate EWQI####
tidy_data <- tidy_data %>%
group_by(Location, Year) %>%
summarize(
EWQI = sum(SubIndex, na.rm = TRUE)
) %>%
ungroup()
#### Step 2: Categorize EWQI Scores####
tidy_data <- tidy_data %>%
mutate(
Quality = case_when(
EWQI < 50 ~ "Excellent",
EWQI >= 50 & EWQI < 100 ~ "Good",
EWQI >= 100 & EWQI < 200 ~ "Poor",
EWQI >= 200 ~ "Very Poor"
)
)
# Step 3.1: Time-Series Plot
ggplot(tidy_data, aes(x = Year, y = EWQI, color = Location)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = "Time-Series Analysis of EWQI",
x = "Year",
y = "EWQI"
) +
theme_minimal(base_size = 14)
library(ggplot2)
# Time series plot for EWQI trends
ggplot(tidy_data, aes(x = Year, y = EWQI, color = Location, group = Location)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "EWQI Trends Over the Years",
x = "Year",
y = "Environmental Water Quality Index (EWQI)",
color = "Location"
) +
theme_minimal(base_size = 14)
# Time series plot for EWQI trends with legend at the bottom
ggplot(tidy_data, aes(x = Year, y = EWQI, color = Location, group = Location)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "EWQI Trends Over the Years",
x = "Year",
y = "Environmental Water Quality Index (EWQI)",
color = "Location"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Time series plot for EWQI trends with legend at the bottom
ggplot(tidy_data, aes(x = Year, y = EWQI, color = Location, group = Location)) +
geom_line(size = 1.5) +  # Thicker lines for better visibility
geom_point(size = 4) +  # Larger points for emphasis and clarity
labs(
title = "EWQI Trends Over the Years",  # Title of the plot
x = "Year",  # X-axis label
y = "Environmental Water Quality Index (EWQI)",  # Y-axis label
color = "Location"  # Legend title
) +
scale_color_manual(values = c("Mirpur Bridge" = "#1f77b4",   # Blue
"Hazaribag" = "#ff7f0e",    # Orange
"Kamrangirchar" = "#2ca02c")) +  # Green
theme_minimal(base_size = 16) +  # Clean, minimalist theme for better readability
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5, color = "#333333"),  # Title customization (bold, centered)
plot.subtitle = element_text(size = 14, hjust = 0.5, color = "#666666"),  # Subtitle styling
axis.title = element_text(size = 16, face = "bold"),  # Axis title size
axis.text = element_text(size = 14),  # Axis text size
legend.title = element_text(size = 16, face = "bold"),  # Legend title size
legend.text = element_text(size = 14),  # Legend text size
legend.position = "bottom",  # Legend at the bottom for better positioning
panel.grid = element_line(color = "gray90", size = 0.5),  # Subtle gridlines for clarity
panel.grid.major = element_line(linetype = "dashed")  # Dash gridlines for easy reading
) +
guides(color = guide_legend(title = "Location"))  # Customizing the legend title
#Spatial Plot for EWQI#
# Required Libraries
library(dplyr)
library(ggplot2)
# Verified location data (example format, replace with your authentic data)
locations <- tibble(
Location = c("Hazaribag", "Mirpur Bridge", "Dhaka City"),
Latitude = c(23.789, 23.812, 23.810),
Longitude = c(90.373, 90.416, 90.412)
)
# Merge spatial data with EWQI
spatial_data <- tidy_data %>%
left_join(locations, by = "Location")
# Check merged spatial data
print(head(spatial_data))
# Spatial Plot of EWQI
ggplot(spatial_data, aes(x = Longitude, y = Latitude, color = EWQI, size = EWQI)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "green", high = "red", name = "EWQI") +
scale_size_continuous(range = c(3, 10), name = "EWQI") +
labs(
title = "Spatial Distribution of Environmental Water Quality Index (EWQI)",
x = "Longitude",
y = "Latitude"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
)
####Spatial####
df
library(dplyr)
library(tidyr)
# Check column types
str(df)
# Convert monthly columns to numeric
df_cleaned <- df %>%
mutate(across(starts_with("J"), as.numeric, .names = "cleaned_{col}"))
# Pivot longer with cleaned data
tidy_data <- df_cleaned %>%
pivot_longer(
cols = starts_with("cleaned_J"),  # Use the cleaned columns
names_to = "Month",
values_to = "Value"
) %>%
filter(!is.na(Value)) %>%
mutate(
Month = case_when(
Month %in% c("cleaned_J...5", "cleaned_J...10", "cleaned_J...11") ~ "January",
Month == "cleaned_F" ~ "February",
Month == "cleaned_M...7" ~ "March",
Month == "cleaned_A...8" ~ "April",
Month == "cleaned_M...9" ~ "May",
Month == "cleaned_A...12" ~ "August",
Month == "cleaned_S" ~ "September",
Month == "cleaned_O" ~ "October",
Month == "cleaned_N" ~ "November",
Month == "cleaned_D" ~ "December",
TRUE ~ Month
)
) %>%
select(Location, Year, Parameter, Month, Value)
# Verify the cleaned dataset
print(head(tidy_data))
tidy_data <- tidy_data %>%
group_by(Location, Year, Parameter, Month) %>%
summarize(Value = mean(Value, na.rm = TRUE), .groups = "drop")
# Create the map
ggplot() +
annotation_map_tile(
"https://tile.openstreetmap.org/{z}/{x}/{y}.png"
) +
geom_point(
data = spatial_data,
aes(x = Longitude, y = Latitude, color = EWQI, size = EWQI),
alpha = 0.8
) +
scale_color_gradient(low = "green", high = "red", name = "EWQI") +
scale_size_continuous(range = c(3, 10), name = "EWQI") +
labs(
title = "Spatial Distribution of EWQI in the Buriganga River",
x = "Longitude",
y = "Latitude"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
)
ggplot() +
geom_point(
data = spatial_data,
aes(x = Longitude, y = Latitude, color = EWQI, size = EWQI),
alpha = 0.8
) +
scale_color_gradient(low = "green", high = "red", name = "EWQI") +
scale_size_continuous(range = c(3, 10), name = "EWQI") +
labs(
title = "Spatial Distribution of EWQI in the Buriganga River",
x = "Longitude",
y = "Latitude"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
)
